services:
  postgres-primary:
    image: postgres:alpine
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: adminPassword
      POSTGRES_DB: financial_system
    ports:
      - "5432:5432"
    volumes:
      - ./config/db/primary:/docker-entrypoint-initdb.d
      - postgres_primary_data:/var/lib/postgresql/data
    networks:
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d financial_system"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10

  postgres-replica:
    image: postgres:alpine
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: adminPassword
      POSTGRES_DB: financial_system
    ports:
      - "5433:5432"
    volumes:
      - ./config/db/replica:/docker-entrypoint-initdb.d
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - internal_network
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: >
      -c hot_standby=on

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest.arm64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2201
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - internal_network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2201", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-enterprise-kafka:latest.arm64
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2201
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network

  api-gateway-nginx:
    image: nginx:latest
    volumes:
      - ./config/nginx/api-gateway.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
        - public_network
        - internal_network

  api-gateway:
    build: ./api-gateway
    # deploy:
    #   replicas: 3
    depends_on:
      kafka: 
        condition: service_healthy
      postgres-primary:
        condition: service_started
      postgres-replica:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      TRANSACTION_SERVICE_URL: http://transaction-service-nginx
      ANTI_FRAUD_SERVICE_URL: http://anti-fraud-service-nginx
      STATUS_UPDATE_SERVICE_URL: http://status-update-service-nginx
    networks:
      - internal_network
  
  transaction-service-nginx:
    image: nginx:latest
    volumes:
      - ./config/nginx/transaction-service.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3001:80"
    depends_on:
      - transaction-service
    networks:
      - internal_network
      - public_network

  transaction-service:
    build: ./transaction-service
    # deploy:
    #   replicas: 3
    links:
      - redis
    depends_on:
      kafka: 
        condition: service_healthy
      postgres-primary:
        condition: service_started
      postgres-replica:
        condition: service_started
      redis:
        condition: service_healthy
    # ports:
    #   - "3001:3001"
    environment:
      DB_HOST: postgres-primary
      DB_REPLICA_HOST: postgres-replica
      DB_PORT: 5432
      DB_USERNAME: testuser
      DB_PASSWORD: adminPassword
      DB_NAME: financial_system
      DB_SYNCHRONIZE: "true"
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - internal_network

  anti-fraud-service-nginx:
    image: nginx:latest
    volumes:
      - ./config/nginx/anti-fraud-service.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3002:80"
    depends_on:
      - anti-fraud-service
    networks:
      - internal_network

  anti-fraud-service:
    build: ./anti-fraud-service
    # deploy:
    #   replicas: 3
    depends_on:
      kafka: 
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:29092
    networks:
      - internal_network

  status-update-service-nginx:
    image: nginx:latest
    volumes:
      - ./config/nginx/status-update-service.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3003:80"
    depends_on:
      - status-update-service
    networks:
      - internal_network

  status-update-service:
    build: ./status-update-service
    # deploy:
    #   replicas: 3
    depends_on:
      kafka: 
        condition: service_healthy
      postgres-primary:
        condition: service_started
      postgres-replica:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      DB_HOST: postgres-primary
      DB_REPLICA_HOST: postgres-replica
      DB_PORT: 5432
      DB_USERNAME: testuser
      DB_PASSWORD: adminPassword
      DB_NAME: financial_system
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - internal_network

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres-primary
      - postgres-replica
    networks:
      - public_network
      - internal_network

networks:
  public_network:
    driver: bridge
  internal_network:
    driver: bridge
    internal: true
  # app-network:
  #   driver: bridge

volumes:
  postgres_primary_data:
  postgres_replica_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data: